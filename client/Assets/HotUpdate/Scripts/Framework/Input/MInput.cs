//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/HotUpdate/Scripts/Framework/Input/MInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MInput"",
    ""maps"": [
        {
            ""name"": ""GamePlayAction"",
            ""id"": ""184a0980-141b-4960-8d49-c32ff3ffab07"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""52707305-1466-4dc9-9953-e1fad72099d0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""5a71713f-8e6c-48fc-99a9-3ea4b801a451"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce0f7dc9-1fe0-41ed-b509-c2f7ec9c59de"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b82cfbc-907b-4a8f-aafb-226b46b6bf03"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlayAction
        m_GamePlayAction = asset.FindActionMap("GamePlayAction", throwIfNotFound: true);
        m_GamePlayAction_Click = m_GamePlayAction.FindAction("Click", throwIfNotFound: true);
        m_GamePlayAction_MouseMove = m_GamePlayAction.FindAction("MouseMove", throwIfNotFound: true);
    }

    ~@MInput()
    {
        UnityEngine.Debug.Assert(!m_GamePlayAction.enabled, "This will cause a leak and performance issues, MInput.GamePlayAction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlayAction
    private readonly InputActionMap m_GamePlayAction;
    private List<IGamePlayActionActions> m_GamePlayActionActionsCallbackInterfaces = new List<IGamePlayActionActions>();
    private readonly InputAction m_GamePlayAction_Click;
    private readonly InputAction m_GamePlayAction_MouseMove;
    public struct GamePlayActionActions
    {
        private @MInput m_Wrapper;
        public GamePlayActionActions(@MInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_GamePlayAction_Click;
        public InputAction @MouseMove => m_Wrapper.m_GamePlayAction_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_GamePlayAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActionActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActionActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
        }

        private void UnregisterCallbacks(IGamePlayActionActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
        }

        public void RemoveCallbacks(IGamePlayActionActions instance)
        {
            if (m_Wrapper.m_GamePlayActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActionActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActionActions @GamePlayAction => new GamePlayActionActions(this);
    public interface IGamePlayActionActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
    }
}
